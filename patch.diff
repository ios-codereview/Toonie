diff --git a/Toonie/Common/CommonUtility.swift b/Toonie/Common/CommonUtility.swift
index d578364..f27412d 100644
--- a/Toonie/Common/CommonUtility.swift
+++ b/Toonie/Common/CommonUtility.swift
@@ -6,9 +6,9 @@
 //  Copyright © 2019 Yapp. All rights reserved.
 //
 
-import UIKit
 import Firebase
 import StoreKit
+import UIKit
 
 ///애플리케이션에 필요한 잡다한 도구 모음
 final class CommonUtility: NSObject {
@@ -17,7 +17,7 @@ final class CommonUtility: NSObject {
     static let devSwitch: Bool = true
     
     //디자인 가이드 기준 Xs
-    static let deviceWidth: CGFloat  = 375
+    static let deviceWidth: CGFloat = 375
     static let deviceHeight: CGFloat = 812
     
     weak var mainNavigationViewController: MainNavigationController?
diff --git a/Toonie/Detail/Controller/ToonWebViewController.swift b/Toonie/Detail/Controller/ToonWebViewController.swift
index a1b8b96..1a5e8ee 100644
--- a/Toonie/Detail/Controller/ToonWebViewController.swift
+++ b/Toonie/Detail/Controller/ToonWebViewController.swift
@@ -69,7 +69,7 @@ final class ToonWebViewController: UIViewController, WKNavigationDelegate {
     private func setLabel() {
         let javascript = "document.title\n"
         
-        instagramWebView.evaluateJavaScript(javascript) { [weak self] (result, error) -> Void in
+        instagramWebView.evaluateJavaScript(javascript) { [weak self] result, error -> Void in
             guard let self = self else { return }
             if error == nil {
                 self.idLabel.text = result as? String
diff --git a/Toonie/Extension/UIButton+.swift b/Toonie/Extension/UIButton+.swift
index 26c9e22..d52e6e4 100644
--- a/Toonie/Extension/UIButton+.swift
+++ b/Toonie/Extension/UIButton+.swift
@@ -10,21 +10,23 @@ import UIKit
 
 extension UIButton {
     func centerImageAndButton(_ gap: CGFloat, imageOnTop: Bool) {
-        
+
         guard let imageView = self.imageView,
             let titleLabel = self.titleLabel else { return }
-        
+
         let sign: CGFloat = imageOnTop ? 1 : -1
         let imageSize = imageView.frame.size
-        self.titleEdgeInsets = UIEdgeInsets.init(top: (imageSize.height+gap)*sign,
-                                                 left: -imageSize.width,
-                                                 bottom: 0,
-                                                 right: 0)
-        
+        self.titleEdgeInsets = UIEdgeInsets(
+            top: (imageSize.height + gap) * sign,
+            left: -imageSize.width,
+            bottom: 0,
+            right: 0)
+
         let titleSize = titleLabel.bounds.size
-        self.imageEdgeInsets = UIEdgeInsets.init(top: -(titleSize.height+gap)*sign,
-                                                 left: 0,
-                                                 bottom: 0,
-                                                 right: -titleSize.width)
+        self.imageEdgeInsets = UIEdgeInsets(
+            top: -(titleSize.height + gap) * sign,
+            left: 0,
+            bottom: 0,
+            right: -titleSize.width)
     }
 }
diff --git a/Toonie/Extension/UIFont+.swift b/Toonie/Extension/UIFont+.swift
index f2985b9..323ad28 100644
--- a/Toonie/Extension/UIFont+.swift
+++ b/Toonie/Extension/UIFont+.swift
@@ -10,36 +10,44 @@ import Foundation
 import UIKit
 
 extension UIFont {
-    
+
     ///AppleSDGothicNeo가져옴
     public enum AppleSDOption {
         case thin, ultraLight, semiBold, medium, regular, bold, light
     }
-    
-    public static func getAppleSDGothicNeo(option: AppleSDOption,
-                                           size: CGFloat) -> UIFont {
+
+    public static func getAppleSDGothicNeo(
+        option: AppleSDOption,
+        size: CGFloat) -> UIFont {
         switch option {
         case .thin:
-            return UIFont.init(name: "AppleSDGothicNeo-Thin",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-Thin",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .ultraLight:
-            return UIFont.init(name: "AppleSDGothicNeo-UltraLight",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-UltraLight",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .semiBold:
-            return UIFont.init(name: "AppleSDGothicNeo-SemiBold",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-SemiBold",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .medium:
-            return UIFont.init(name: "AppleSDGothicNeo-Medium",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-Medium",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .regular:
-            return UIFont.init(name: "AppleSDGothicNeo-Regular",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-Regular",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .bold:
-            return UIFont.init(name: "AppleSDGothicNeo-Bold",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-Bold",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         case .light:
-            return UIFont.init(name: "AppleSDGothicNeo-Light",
-                               size: size) ?? UIFont.systemFont(ofSize: size)
+            return UIFont(
+                name: "AppleSDGothicNeo-Light",
+                size: size) ?? UIFont.systemFont(ofSize: size)
         }
     }
 }
diff --git a/Toonie/Extension/UIViewController+.swift b/Toonie/Extension/UIViewController+.swift
index 0d9afe8..d70f2b0 100644
--- a/Toonie/Extension/UIViewController+.swift
+++ b/Toonie/Extension/UIViewController+.swift
@@ -28,7 +28,7 @@ extension UIViewController {
                         self.view.transform = CGAffineTransform(scaleX: 1.3,
                                                                 y: 1.3)
                         self.view.alpha = 0.0},
-                       completion: { (_) in
+                       completion: { _ in
                         self.view.removeFromSuperview()
         })
     }
diff --git a/Toonie/Feed/Controller/FeedViewController.swift b/Toonie/Feed/Controller/FeedViewController.swift
index ef2f84a..244c4cb 100644
--- a/Toonie/Feed/Controller/FeedViewController.swift
+++ b/Toonie/Feed/Controller/FeedViewController.swift
@@ -6,9 +6,9 @@
 //  Copyright © 2019 Yapp. All rights reserved.
 //
 
-import UIKit
 import Lottie
 import SnapKit
+import UIKit
 
 // Feed의 NavigationController
 final class FeedNavigationController: UINavigationController {
@@ -168,7 +168,7 @@ final class FeedViewController: GestureViewController {
         if let tagAnimationView = tagAnimationView {
             tagAnimationView.contentMode = .scaleAspectFit
             tagView.addSubview(tagAnimationView)
-            tagAnimationView.snp.makeConstraints { (make) -> Void in
+            tagAnimationView.snp.makeConstraints { make -> Void in
                 make.width.equalTo(tagView.bounds.width)
                 make.height.equalTo(tagView.bounds.height)
                 make.center.equalTo(tagView)
diff --git a/Toonie/Feed/RecommendView/RecommendCollectionViewCell.swift b/Toonie/Feed/RecommendView/RecommendCollectionViewCell.swift
index bec552a..3b98685 100644
--- a/Toonie/Feed/RecommendView/RecommendCollectionViewCell.swift
+++ b/Toonie/Feed/RecommendView/RecommendCollectionViewCell.swift
@@ -31,7 +31,7 @@ final class RecommendCollectionViewCell: UICollectionViewCell {
         super.prepareForReuse()
         recentToonImageView.image = nil
         toonNameTitle.text = nil
-        bookMarkButton.isSelected  = false
+        bookMarkButton.isSelected = false
         
         recentToonImageView.setCorner(cornerRadius: 4.0)
     }
diff --git a/Toonie/Feed/RecommendView/RecommendViewController.swift b/Toonie/Feed/RecommendView/RecommendViewController.swift
index 99ae1de..545317e 100644
--- a/Toonie/Feed/RecommendView/RecommendViewController.swift
+++ b/Toonie/Feed/RecommendView/RecommendViewController.swift
@@ -10,38 +10,38 @@ import UIKit
 
 // '지금 나는' 태그에 따른 인스타툰 추천 화면
 final class RecommendViewController: GestureViewController {
-    
+
     //tagCollectionView 5줄 고정 위한 상수, 변수
     private let tagScrollContentViewWidthInitValue: CGFloat = 672
     private let maxTagItemWidth = 168
-    
+
     ///item들을 일렬로 쭉 나열했을때의 max길이(간격포함)
-    private let maxTagAllItemWidth = 4256
-    
+    private let maxTagAllItemWidth = 4_256
+
     private let maxTagCount = 31
     private let maxLine = 5
-    
+
     /// tagAllWidth - 현재 뿌려질 태그 아이템들을 일렬로 늘어왔을때의 총 길이 (간격포함)
     private var tagAllWidth: Int = 0
     private var tagList = [String]()
     private var tagSelectArray = [String]()
-    
+
     private var isFavorite = false
-    
+
     // MARK: - IBOutlets
-    
+
     @IBOutlet private weak var recommendTableView: UITableView!
-    
+
     @IBOutlet private weak var tagFrameView: UIView!
     @IBOutlet private weak var tagScrollView: UIScrollView!
-    
+
     ///이 수치에 따라 태그 줄수를 컨트롤 가능.
     @IBOutlet private weak var tagScrollContentViewWidth: NSLayoutConstraint!
-    
+
     @IBOutlet private weak var tagCollectionView: UICollectionView!
     @IBOutlet private weak var tagCollectionViewFlowLayout: UICollectionViewFlowLayout!
     @IBOutlet private weak var tagSelectedNotInfoView: UIView!
-    
+
     // MARK: - Life Cycle
     override func viewDidLoad() {
         super.viewDidLoad()
@@ -49,23 +49,23 @@ final class RecommendViewController: GestureViewController {
         setTableViewXib()
         setTagFlowLayout()
         setTagScrollContent()
-        
+
         // test
 //        getToonOfTagList(tag: "알콩달콩 결혼 생활")
     }
-    
+
     override func viewWillAppear(_ animated: Bool) {
         super.viewWillAppear(true)
         reloadTagTableView()
     }
-    
+
     // MARK: - IBActions
     @IBAction func backButtionDidTap(_ sender: Any) {
         self.navigationController?.popViewController(animated: true)
     }
-    
+
     // MARK: - Function
-    
+
     func getCurationTagList() {
         RecommendService.shared.getRecommends { [weak self] res in
             guard let self = self else { return }
@@ -73,129 +73,149 @@ final class RecommendViewController: GestureViewController {
             self.tagCollectionView.reloadData()
         }
     }
-    
+
 //    func getToonOfTagList(tag: String) {
 //        CurationTagService.shared.getCurationTagList(tagName: tag) { res in
 //            // test
 //            print("res : ", res!)
 //        }
 //    }
-//    
+//
     ///cell xib 이용
     func setTableViewXib() {
-        let nibName = UINib(nibName: "RecommendTableViewCell",
-                            bundle: nil)
-        recommendTableView.register(nibName,
-                                    forCellReuseIdentifier: "RecommendTableViewCell")
+        let nibName = UINib(
+            nibName: "RecommendTableViewCell",
+            bundle: nil)
+        recommendTableView.register(
+            nibName,
+            forCellReuseIdentifier: "RecommendTableViewCell")
     }
-    
+
     ///tagFlowLayout 프로퍼티 설정
     func setTagFlowLayout() {
         tagCollectionViewFlowLayout.minimumInteritemSpacing = 10
         tagCollectionViewFlowLayout.minimumLineSpacing = 9 //라인 사이의 최소간격
-        tagCollectionViewFlowLayout.sectionInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
-        tagCollectionViewFlowLayout.estimatedItemSize = CGSize.init(width: 20, height: 30)
+        tagCollectionViewFlowLayout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
+        tagCollectionViewFlowLayout.estimatedItemSize = CGSize(width: 20, height: 30)
     }
-    
+
     ///스크롤링 될 영역, 초기 보여질 영역 세팅
     func setTagScrollContent() {
         DispatchQueue.main.async {
             let leftMagin = (self.tagScrollContentViewWidth.constant - self.view.bounds.width) / 2
-            self.tagScrollView.contentInset = UIEdgeInsets.init(top: 0,
-                                                                left: leftMagin + 20,
-                                                                bottom: 0,
-                                                                right: 20)
+            self.tagScrollView.contentInset = UIEdgeInsets(
+                top: 0,
+                left: leftMagin + 20,
+                bottom: 0,
+                right: 20)
         }
     }
-    
+
     ///태그 선택할때
     func reloadTagTableView() {
         //        print("tagSelectArray \(tagSelectArray)")
         recommendTableView.reloadData()
     }
-    
+
 }
 
 // MARK: - TableView : 전체를 이루는 뷰
 extension RecommendViewController: UITableViewDataSource {
-    func tableView(_ tableView: UITableView,
-                   numberOfRowsInSection section: Int) -> Int {
-        if tagSelectArray.count == 0 {
-            tagFrameView.bounds = CGRect.init(x: 0,
-                                              y: 0,
-                                              width: self.view.bounds.width,
-                                              height: tableView.bounds.height)
+    func tableView(
+        _ tableView: UITableView,
+        numberOfRowsInSection section: Int
+    ) -> Int {
+        if tagSelectArray.isEmpty {
+            tagFrameView.bounds = CGRect(
+                x: 0,
+                y: 0,
+                width: self.view.bounds.width,
+                height: tableView.bounds.height)
             tagSelectedNotInfoView.isHidden = false
         } else {
-            tagFrameView.bounds = CGRect.init(x: 0,
-                                              y: 0,
-                                              width: self.view.bounds.width,
-                                              height: 326)
+            tagFrameView.bounds = CGRect(
+                x: 0,
+                y: 0,
+                width: self.view.bounds.width,
+                height: 326
+            )
             tagSelectedNotInfoView.isHidden = true
         }
         return tagSelectArray.count
     }
-    
-    func tableView(_ tableView: UITableView,
-                   cellForRowAt indexPath: IndexPath) -> UITableViewCell {
+
+    func tableView(
+        _ tableView: UITableView,
+        cellForRowAt indexPath: IndexPath
+    ) -> UITableViewCell {
         guard let cell = tableView
-            .dequeueReusableCell(withIdentifier: "RecommendTableViewCell",
-                                 for: indexPath) as? RecommendTableViewCell
+            .dequeueReusableCell(
+                withIdentifier: "RecommendTableViewCell",
+                for: indexPath) as? RecommendTableViewCell
             else {
                 return UITableViewCell()
         }
-        
+
         //역순 노출
         let reverseIndex = tagSelectArray.count - (indexPath.row + 1)
         cell.setRecommentTitleLabel(titleString: tagSelectArray[reverseIndex])
-        
+
         return cell
     }
 }
 
 // MARK: - CollectionView : TagView - UICollectionViewDataSource
 extension RecommendViewController: UICollectionViewDataSource {
-    func collectionView(_ collectionView: UICollectionView,
-                        numberOfItemsInSection section: Int) -> Int {
+    func collectionView(
+        _ collectionView: UICollectionView,
+        numberOfItemsInSection section: Int
+    ) -> Int {
         if maxTagCount < tagList.count {
             return maxTagCount
         }
         return tagList.count
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        cellForItemAt indexPath: IndexPath
+    ) -> UICollectionViewCell {
         guard let cell = collectionView
-            .dequeueReusableCell(withReuseIdentifier: "TagCollectionViewCell",
-                                 for: indexPath) as? TagCollectionViewCell
+            .dequeueReusableCell(
+                withReuseIdentifier: "TagCollectionViewCell",
+                for: indexPath) as? TagCollectionViewCell
             else { return UICollectionViewCell() }
         let titleName = tagList[indexPath.row]
         cell.setTitleLabel(titleString: titleName)
         cell.setCellStatus(bool: false)
-        
+
         return cell
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        layout collectionViewLayout: UICollectionViewLayout,
-                        sizeForItemAt indexPath: IndexPath) -> CGSize {
-        
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        layout collectionViewLayout: UICollectionViewLayout,
+        sizeForItemAt indexPath: IndexPath
+    ) -> CGSize {
+
         let keyword = tagList[indexPath.row]
-        let font = UIFont.getAppleSDGothicNeo(option: .regular,
-                                              size: 14)
-        var width = Int(keyword.widthWithConstrainedHeight(height: 17,
-                                                           font: font))
+        let font = UIFont.getAppleSDGothicNeo(
+            option: .regular,
+            size: 14)
+        var width = Int(keyword.widthWithConstrainedHeight(
+            height: 17,
+            font: font))
         width += 22
-        
+
         //최대길이제약 - 157
         if maxTagItemWidth < width {
             width = maxTagItemWidth
         }
-        
+
         tagAllWidth += width
-        
+
         //마지막 아니면 간격인 10씩 더해줌
-        if tagList.count-1 != indexPath.row {
+        if tagList.count - 1 != indexPath.row {
             tagAllWidth += 10
         } else {
             // 개수, 길이에 상관없이 5줄, 가운데 정렬을 위한 수치 계산.
@@ -208,31 +228,32 @@ extension RecommendViewController: UICollectionViewDataSource {
                 }
             }
         }
-        
+
         return CGSize(width: width, height: 30)
     }
-    
+
 }
 
 // MARK: - CollectionView : TagView - UICollectionViewDelegate
 extension RecommendViewController: UICollectionViewDelegate {
-    func collectionView(_ collectionView: UICollectionView,
-                        didSelectItemAt indexPath: IndexPath) {
+    func collectionView(
+        _ collectionView: UICollectionView,
+        didSelectItemAt indexPath: IndexPath) {
         if let cell = collectionView.cellForItem(at: indexPath) as? TagCollectionViewCell {
             cell.setCellStatus(bool: !cell.getCellStatus())
-            
+
             //선택한 키워드 추가 및 삭제
             if cell.getCellStatus() == true {
                 tagSelectArray.append(tagList[indexPath.row])
-                
+
             } else {
                 let findIndex = tagSelectArray.firstIndex(of: cell.getTitleLabel().text ?? "")
-                
+
                 if let index = findIndex {
                     tagSelectArray.remove(at: index)
                 }
             }
-            
+
             //카운트레이블, 버튼 리로드
             reloadTagTableView()
         }
@@ -241,21 +262,24 @@ extension RecommendViewController: UICollectionViewDelegate {
 
 // MARK: - CollectionView : TagView - UICollectionViewDelegateFlowLayout
 extension RecommendViewController: UICollectionViewDelegateFlowLayout {
-    private func collectionView(collectionView: UICollectionView,
-                                layout collectionViewLayout: UICollectionViewLayout,
-                                sizeForItemAtIndexPath indexPath: IndexPath) -> CGSize {
+    private func collectionView(
+        collectionView: UICollectionView,
+        layout collectionViewLayout: UICollectionViewLayout,
+        sizeForItemAtIndexPath indexPath: IndexPath) -> CGSize {
         let keyword = tagList[indexPath.row]
-        let font = UIFont.getAppleSDGothicNeo(option: .regular,
-                                              size: 14)
-        var width = Int(keyword.widthWithConstrainedHeight(height: 17,
-                                                           font: font))
+        let font = UIFont.getAppleSDGothicNeo(
+            option: .regular,
+            size: 14)
+        var width = Int(keyword.widthWithConstrainedHeight(
+            height: 17,
+            font: font))
         width += 22
-        
+
         //최대길이제약 - 157
         if maxTagItemWidth < width {
             width = maxTagItemWidth
         }
-        
+
         return CGSize(width: width, height: 30)
     }
 }
diff --git a/Toonie/Feed/RecommendView/TagCollectionViewCell.swift b/Toonie/Feed/RecommendView/TagCollectionViewCell.swift
index 839d81a..d480a59 100644
--- a/Toonie/Feed/RecommendView/TagCollectionViewCell.swift
+++ b/Toonie/Feed/RecommendView/TagCollectionViewCell.swift
@@ -22,16 +22,15 @@ final class TagCollectionViewCell: UICollectionViewCell {
     /// didTap 일어날 때마다 cellBackgroundView 레이아웃 바꿔주는 함수
     func setBorderViewLayout(status: Bool) {
         if status == false { // 선택 안함
-            backView.setBorder(color: UIColor.init(white: 0.447, alpha: 0.4).cgColor,
+            backView.setBorder(color: UIColor(white: 0.447, alpha: 0.4).cgColor,
                                borderWidth: 1)
-            titleLabel.textColor = UIColor.init(white: 0, alpha: 0.4)
+            titleLabel.textColor = UIColor(white: 0, alpha: 0.4)
             
         } else { // 선택함
-            let borderColor = UIColor.init(named: "tag")?.cgColor
+            let borderColor = UIColor(named: "tag")?.cgColor
             
-            backView.setBorder(color: borderColor ?? UIColor.init(white: 0, alpha: 0.4).cgColor,
-                               borderWidth: 1)
-            titleLabel.textColor = UIColor.init(white: 0, alpha: 1)
+            backView.setBorder(color: borderColor ?? UIColor(white: 0, alpha: 0.4).cgColor, borderWidth: 1)
+            titleLabel.textColor = UIColor(white: 0, alpha: 1)
             
         }
         backView.setCorner(cornerRadius: 5)
diff --git a/Toonie/Feed/View/FavoriteCollectionViewCell.swift b/Toonie/Feed/View/FavoriteCollectionViewCell.swift
index 12a3843..1f9199c 100644
--- a/Toonie/Feed/View/FavoriteCollectionViewCell.swift
+++ b/Toonie/Feed/View/FavoriteCollectionViewCell.swift
@@ -25,7 +25,7 @@ final class FavoriteCollectionViewCell: UICollectionViewCell {
         favoriteToonTitleLabel.text = nil
         favoriteToonTagLabel.text = nil
         toonIdLabel.text = nil
-        bookMarkButton.isSelected  = false
+        bookMarkButton.isSelected = false
     }
     
     // MARK: - IBAction
diff --git a/Toonie/Feed/View/ForYouCollectionViewCell.swift b/Toonie/Feed/View/ForYouCollectionViewCell.swift
index 56e5c22..3e3485d 100644
--- a/Toonie/Feed/View/ForYouCollectionViewCell.swift
+++ b/Toonie/Feed/View/ForYouCollectionViewCell.swift
@@ -48,7 +48,7 @@ final class ForYouCollectionViewCell: UICollectionViewCell {
         forYouToonTitleLabel.text = nil
         forYouToonTagLabel.text = nil
         toonIdLabel.text = nil
-        bookMarkButton.isSelected  = false
+        bookMarkButton.isSelected = false
     }
     
     // MARK: - Functions
diff --git a/Toonie/Feed/View/RecentCollectionViewCell.swift b/Toonie/Feed/View/RecentCollectionViewCell.swift
index bd29a55..ee45f81 100644
--- a/Toonie/Feed/View/RecentCollectionViewCell.swift
+++ b/Toonie/Feed/View/RecentCollectionViewCell.swift
@@ -46,7 +46,7 @@ final class RecentCollectionViewCell: UICollectionViewCell {
         recentToonImageView.image = nil
         recentToonTitleLabel.text = nil
         toonIdLabel.text = nil
-        bookMarkButton.isSelected  = false
+        bookMarkButton.isSelected = false
     }
     
     // MARK: - Functions
diff --git a/Toonie/Look/LookDetailViewController/LookDetailTopSelectViewController.swift b/Toonie/Look/LookDetailViewController/LookDetailTopSelectViewController.swift
index 982ec48..db70d76 100644
--- a/Toonie/Look/LookDetailViewController/LookDetailTopSelectViewController.swift
+++ b/Toonie/Look/LookDetailViewController/LookDetailTopSelectViewController.swift
@@ -14,41 +14,39 @@ struct TagStructure {
 }
 
 final class LookDetailTopSelectViewController: UIViewController {
-    
+
     // MARK: - IBOutlets
-    
+
     @IBOutlet weak var lookDetailTopSelectCollectionView: UICollectionView!
-    
+
     // MARK: - Properties
-    
+
     //collectionView didSelected 했을시 호출할 클로저
     var tagDidTapClosure: ((String) -> Void)?
     var selectedKeyword: String = ""
-    
+
     //state로 on off 진행
     var tags = [TagStructure]()
     private var toonAllList = [ToonList]()
-    
+
     // MARK: - Life Cycle
-    
+
     override func viewDidLoad() {
         super.viewDidLoad()
         //맨처음 전체보기 기본세팅
         setTags()
     }
-    
+
     func setTags() {
-        let tagStructure: TagStructure = TagStructure.init(tagName: "전체보기",
-                                                           state: true)
+        let tagStructure: TagStructure = TagStructure(tagName: "전체보기", state: true)
         tags.append(tagStructure)
-        
+
         KeywordToonListService
             .shared
-            .getKeywords(keyword: selectedKeyword) { [weak self] (tags) in
+            .getKeywords(keyword: selectedKeyword) { [weak self] tags in
                 guard let self = self else { return }
                 for tag in tags ?? [String]() {
-                    self.tags.append(TagStructure.init(tagName: "#"+tag,
-                                                       state: false))
+                    self.tags.append(TagStructure(tagName: "#" + tag, state: false))
                 }
                 self.lookDetailTopSelectCollectionView.reloadData()
         }
@@ -58,83 +56,93 @@ final class LookDetailTopSelectViewController: UIViewController {
 // MARK: - UICollectionViewDataSource
 
 extension LookDetailTopSelectViewController: UICollectionViewDataSource {
-    
+
     func collectionView(_ collectionView: UICollectionView,
-                        numberOfItemsInSection section: Int) -> Int {
+        numberOfItemsInSection section: Int) -> Int {
         return tags.count
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
-        
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
+
         guard let cell = collectionView
-            .dequeueReusableCell(withReuseIdentifier: "LookDetailTopSelectCell",
-                                 for: indexPath) as? LookDetailTopSelectCell
+            .dequeueReusableCell(
+                withReuseIdentifier: "LookDetailTopSelectCell",
+                for: indexPath) as? LookDetailTopSelectCell
             else { return UICollectionViewCell() }
-        
+
         cell.setTitleLabel(text: tags[indexPath.row].tagName)
         cell.setCellStatus(bool: tags[indexPath.row].state)
-        
+
         return cell
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        didSelectItemAt indexPath: IndexPath) {
-        
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        didSelectItemAt indexPath: IndexPath) {
+
         if let closure = self.tagDidTapClosure {
             closure(tags[indexPath.row]
-                .tagName
-                .replacingOccurrences(of: "#",
-                                      with: ""))
+                    .tagName
+                    .replacingOccurrences(
+                        of: "#",
+                        with: ""))
         }
-        
+
         //우선 cell 상태 모두 초기화
         for index in 0..<tags.count {
             tags[index].state = false
         }
-        
+
         //선택한 cell만 상태 변경
         tags[indexPath.row].state = true
-        
+
         self.lookDetailTopSelectCollectionView.reloadData()
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        layout collectionViewLayout: UICollectionViewLayout,
-                        sizeForItemAt indexPath: IndexPath) -> CGSize {
-        
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        layout collectionViewLayout: UICollectionViewLayout,
+        sizeForItemAt indexPath: IndexPath) -> CGSize {
+
         let keyword = tags[indexPath.row].tagName
-        let font = UIFont.getAppleSDGothicNeo(option: .medium,
-                                              size: 14)
-        var width = Int(keyword.widthWithConstrainedHeight(height: 17,
-                                                           font: font))
+        let font = UIFont.getAppleSDGothicNeo(
+            option: .medium,
+            size: 14)
+        var width = Int(keyword.widthWithConstrainedHeight(
+            height: 17,
+            font: font))
         width += 41
-        
+
         return CGSize(width: width, height: 30)
     }
-    
+
 }
 
 // MARK: - UICollectionViewDelegate
 
 extension LookDetailTopSelectViewController: UICollectionViewDelegate {
-    
+
 }
 
 // MARK: - CollectionView : TagView - UICollectionViewDelegateFlowLayout
 
 extension LookDetailTopSelectViewController: UICollectionViewDelegateFlowLayout {
-    private func collectionView(collectionView: UICollectionView,
-                                layout collectionViewLayout: UICollectionViewLayout,
-                                sizeForItemAtIndexPath indexPath: IndexPath) -> CGSize {
-        
+    private func collectionView(
+        collectionView: UICollectionView,
+        layout collectionViewLayout: UICollectionViewLayout,
+        sizeForItemAtIndexPath indexPath: IndexPath) -> CGSize {
+
         let keyword = tags[indexPath.row].tagName
-        let font = UIFont.getAppleSDGothicNeo(option: .medium,
-                                              size: 14)
-        var width = Int(keyword.widthWithConstrainedHeight(height: 17,
-                                                           font: font))
+        let font = UIFont.getAppleSDGothicNeo(
+            option: .medium,
+            size: 14)
+        var width = Int(keyword.widthWithConstrainedHeight(
+            height: 17,
+            font: font))
         width += 41
-        
+
         return CGSize(width: width, height: 30)
     }
 }
diff --git a/Toonie/Look/LookDetailViewController/LookDetailViewController.swift b/Toonie/Look/LookDetailViewController/LookDetailViewController.swift
index 65811fb..254519e 100644
--- a/Toonie/Look/LookDetailViewController/LookDetailViewController.swift
+++ b/Toonie/Look/LookDetailViewController/LookDetailViewController.swift
@@ -10,13 +10,13 @@ import UIKit
 
 ///둘러보기 상세 - LookViewController의 CollectionView의 didSelected시 이동되는 화면
 final class LookDetailViewController: GestureViewController {
-    
+
     // MARK: - IBOutlets
-    
+
     @IBOutlet private weak var lookDetailTitleLabel: UILabel!
     @IBOutlet private weak var lookDetailCollectionView: UICollectionView!
     @IBOutlet private weak var lookDetailCollectionViewFlowLayout: UICollectionViewFlowLayout!
-    
+
     // MARK: - Properties
     var selectedKeyword: String = ""
     private var tag = "전체보기"
@@ -26,28 +26,29 @@ final class LookDetailViewController: GestureViewController {
     private var selectedToonID: String?
     private var favoriteToon: [ToonList]?
     private var isFavorite = false
-    
+
     // MARK: - Life Cycle
-    
+
     override func viewDidLoad() {
         super.viewDidLoad()
         lookDetailTitleLabel.text = selectedKeyword
         setCollectionViewData(keyword: selectedKeyword)
         setCollectionViewLayout()
         registerForPreviewing(with: self, sourceView: lookDetailCollectionView)
-        
+
     }
-    
+
     override func viewWillAppear(_ animated: Bool) {
+        super.viewWillAppear(animated)
         loadFavoriteToon()
     }
-    
+
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
         if segue.identifier == "topSetting" {
             if let viewController = segue.destination as? LookDetailTopSelectViewController {
                 viewController.selectedKeyword = self.selectedKeyword
                 viewController.tagDidTapClosure = { [weak self]
-                    (tagString) -> Void in
+                    tagString -> Void in
                     guard let self = self else { return }
                     self.tag = tagString
                     print("self.selectedKeyword : \(self.selectedKeyword)")
@@ -56,56 +57,60 @@ final class LookDetailViewController: GestureViewController {
             }
         }
     }
-    
+
     // MARK: - IBAction
-    
+
     @IBAction func backButtonDidTap(_ sender: Any) {
         self.navigationController?.popViewController(animated: true)
     }
-    
+
     // MARK: - Function
-    
+
     /// 컬렉션뷰 데이터 설정
     private func setCollectionViewData(keyword: String) {
         if tag == "전체보기" {
             KeywordToonAllListService
                 .shared
-                .getKeywordToonAllList(keyword: self.selectedKeyword,
-                                       completion: { [weak self] (res) in
-                                        guard let self = self else { return }
-                                        guard let toonData = res else { return }
-                                        self.toonAllList = toonData
-                                        self.lookDetailCollectionView.reloadData()
-                })
-            
+                .getKeywordToonAllList(
+                    keyword: self.selectedKeyword,
+                    completion: { [weak self] res in
+                        guard let self = self else { return }
+                        guard let toonData = res else { return }
+                        self.toonAllList = toonData
+                        self.lookDetailCollectionView.reloadData()
+                    })
+
         } else {
             LookToonOfTagService.shared
-                .getLookToonOfTag(toonTag: tag,
-                                  completion: { [weak self] res in
-                                    guard let self = self else { return }
-                                    self.toonList = [res]
-                                    guard let toonData = res.toonInfoList else { return }
-                                    self.toonDataList = toonData
-                                    self.lookDetailCollectionView.reloadData()
-                })
+                .getLookToonOfTag(
+                    toonTag: tag,
+                    completion: { [weak self] res in
+                        guard let self = self else { return }
+                        self.toonList = [res]
+                        guard let toonData = res.toonInfoList else { return }
+                        self.toonDataList = toonData
+                        self.lookDetailCollectionView.reloadData()
+                    })
         }
     }
-    
+
     /// 컬렉션 뷰 아이템 크기, 위치조정
     private func setCollectionViewLayout() {
         lookDetailCollectionViewFlowLayout.scrollDirection = .vertical
         lookDetailCollectionViewFlowLayout.itemSize =
-            CGSize(width: UIScreen.main.bounds.width * 0.322,
-                   height: UIScreen.main.bounds.width * 0.322)
+            CGSize(
+                width: UIScreen.main.bounds.width * 0.322,
+                height: UIScreen.main.bounds.width * 0.322)
         lookDetailCollectionViewFlowLayout.sectionInset =
-            UIEdgeInsets(top: 0,
-                         left: 5 * CommonUtility.getDeviceRatioWidth(),
-                         bottom: 0,
-                         right: 5 * CommonUtility.getDeviceRatioWidth())
+            UIEdgeInsets(
+                top: 0,
+                left: 5 * CommonUtility.getDeviceRatioWidth(),
+                bottom: 0,
+                right: 5 * CommonUtility.getDeviceRatioWidth())
         lookDetailCollectionViewFlowLayout.minimumLineSpacing =
             1.0 * CommonUtility.getDeviceRatioWidth()
-    } 
-    
+    }
+
     /// 인스타툰 상세정보 화면으로 이동
     private func pushDetailToonViewController(toonID: String) {
         let storyboard = UIStoryboard(name: "Detail", bundle: nil)
@@ -115,36 +120,37 @@ final class LookDetailViewController: GestureViewController {
             viewController.detailToonID = toonID
             CommonUtility.sharedInstance
                 .mainNavigationViewController?
-                .pushViewController(viewController,
-                                    animated: true)
+                .pushViewController(
+                    viewController,
+                    animated: true)
         }
-        
+
     }
-    
+
     ///타이틀 세팅
     func setLookDetailTitleLabel(titleString: String) {
         self.lookDetailTitleLabel.text = titleString
     }
-    
+
     /// 찜한 툰 정보 네트워크 요청
     func loadFavoriteToon() {
         FavoriteService.shared.getFavoriteToon { [weak self] result in
             guard let self = self else { return }
-            
+
             if let result = result {
                 self.favoriteToon = result
             }
         }
     }
-    
+
     /// 찜한 상태인지 확인
     private func checkFavoriteStatus(toonId: String) -> Bool {
         isFavorite = false
         guard let favoriteToon = favoriteToon else { return false }
         for index in 0..<favoriteToon.count
-            where toonId == favoriteToon[index].toonID {
-                isFavorite = true
-                break
+        where toonId == favoriteToon[index].toonID {
+            isFavorite = true
+            break
         }
         return isFavorite
     }
@@ -153,23 +159,26 @@ final class LookDetailViewController: GestureViewController {
 // MARK: - UICollectionViewDataSource
 
 extension LookDetailViewController: UICollectionViewDataSource {
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        numberOfItemsInSection section: Int) -> Int {
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        numberOfItemsInSection section: Int) -> Int {
         if tag == "전체보기" {
             return toonAllList.count
         } else {
             return toonDataList.count
         }
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
         guard let cell = collectionView
-            .dequeueReusableCell(withReuseIdentifier: "LookDetailCell",
-                                 for: indexPath) as? LookDetailCell
+            .dequeueReusableCell(
+                withReuseIdentifier: "LookDetailCell",
+                for: indexPath) as? LookDetailCell
             else { return UICollectionViewCell() }
-        
+
         if tag == "전체보기" {
             if let thumnailURL = toonAllList[indexPath.item].instaThumnailUrl {
                 cell.setImageView(imageURL: thumnailURL)
@@ -181,14 +190,15 @@ extension LookDetailViewController: UICollectionViewDataSource {
         }
         return cell
     }
-    
+
 }
 
 // MARK: - UICollectionViewDelegate
 
 extension LookDetailViewController: UICollectionViewDelegate {
-    func collectionView(_ collectionView: UICollectionView,
-                        didSelectItemAt indexPath: IndexPath) {
+    func collectionView(
+        _ collectionView: UICollectionView,
+        didSelectItemAt indexPath: IndexPath) {
         if tag == "전체보기" {
             if let toonId = toonAllList[indexPath.item].toonID {
                 pushDetailToonViewController(toonID: toonId)
@@ -204,35 +214,37 @@ extension LookDetailViewController: UICollectionViewDelegate {
 // MARK: - UIViewControllerPreviewingDelegate
 
 extension LookDetailViewController: UIViewControllerPreviewingDelegate {
-    func previewingContext(_ previewingContext: UIViewControllerPreviewing,
-                           viewControllerForLocation location: CGPoint) -> UIViewController? {
-        
-        let storyboard = UIStoryboard.init(name: "Preview", bundle: nil)
-        
+    func previewingContext(
+        _ previewingContext: UIViewControllerPreviewing,
+        viewControllerForLocation location: CGPoint) -> UIViewController? {
+
+        let storyboard = UIStoryboard(name: "Preview", bundle: nil)
+
         guard let previewVC = storyboard
             .instantiateViewController(withIdentifier: "PreviewVC") as? PreviewViewController
             else {
                 preconditionFailure("Expected a PreviewViewController")
         }
-        
+
         if let selectedIndexPath = lookDetailCollectionView
             .indexPathForItem(at: location) {
-            previewVC.preferredContentSize = CGSize
-                .init(width: UIScreen.main.bounds.width,
-                      height: UIScreen.main.bounds.width)
+            previewVC.preferredContentSize = CGSize(
+                width: UIScreen.main.bounds.width,
+                height: UIScreen.main.bounds.width)
             selectedToonID = toonAllList[selectedIndexPath.item].toonID
             previewVC.toonID = selectedToonID
             previewVC.imageUrl = toonAllList[selectedIndexPath.item].instaThumnailUrl
             previewVC.isFavorite = checkFavoriteStatus(toonId: selectedToonID ?? "")
         }
-        
+
         return previewVC
     }
-    
-    func previewingContext(_ previewingContext: UIViewControllerPreviewing,
-                           commit viewControllerToCommit: UIViewController) {
-        
+
+    func previewingContext(
+        _ previewingContext: UIViewControllerPreviewing,
+        commit viewControllerToCommit: UIViewController) {
+
         pushDetailToonViewController(toonID: selectedToonID ?? "")
     }
-    
+
 }
diff --git a/Toonie/Look/LookViewController/LookViewController.swift b/Toonie/Look/LookViewController/LookViewController.swift
index ea464a4..5432f1d 100644
--- a/Toonie/Look/LookViewController/LookViewController.swift
+++ b/Toonie/Look/LookViewController/LookViewController.swift
@@ -54,7 +54,7 @@ final class LookViewController: GestureViewController {
     
     ///keywrods 값들 가져옴
     func setKeywordValue() {
-        KeywordsService.shared.getKeywords { [weak self] (result) in
+        KeywordsService.shared.getKeywords { [weak self] result in
             guard let self = self else { return }
             self.keywords = result ?? [String]()
             self.reloadKeywordCollectionView()
@@ -80,7 +80,7 @@ extension LookViewController: UICollectionViewDelegate {
                                  for: indexPath) as? LookCell
             else { return UICollectionViewCell() }
         
-        let image: UIImage? = UIImage.init(named: tagImage(name: keywords[indexPath.row], storyboardName: "Look"))
+        let image: UIImage? = UIImage(named: tagImage(name: keywords[indexPath.row], storyboardName: "Look"))
         
         cell.setBackgroundImageView(image: image)
         
diff --git a/Toonie/Main/MainViewController.swift b/Toonie/Main/MainViewController.swift
index e84e647..2aef152 100644
--- a/Toonie/Main/MainViewController.swift
+++ b/Toonie/Main/MainViewController.swift
@@ -56,7 +56,7 @@ final class MainViewController: GestureViewController {
         func showStatusView(view: inout UIView,
                             button: inout UIButton) {
             view.isHidden = !isStatusBool
-            button.isSelected =  isStatusBool
+            button.isSelected = isStatusBool
         }
     }
     
@@ -258,7 +258,7 @@ final class MainViewController: GestureViewController {
     /// 로컬 노티피케이션 설정
     private func setLocalNotification() {
         // MARK: - 여기 options에 원하는 option넣기.
-        UNUserNotificationCenter.current().requestAuthorization(options: [.alert], completionHandler: { (_, _) in
+        UNUserNotificationCenter.current().requestAuthorization(options: [.alert], completionHandler: { _, _ in
             
         })
         UNUserNotificationCenter.current().delegate = self
@@ -276,7 +276,7 @@ final class MainViewController: GestureViewController {
         let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
         let request = UNNotificationRequest(identifier: "DailyNoti", content: content, trigger: trigger)
         let center = UNUserNotificationCenter.current()
-        center.add(request) { (error) in
+        center.add(request) { error in
             print(error?.localizedDescription ?? "")
             
         }
diff --git a/Toonie/MyPage/Controllers/MypageViewController.swift b/Toonie/MyPage/Controllers/MypageViewController.swift
index dc0fd71..b708960 100644
--- a/Toonie/MyPage/Controllers/MypageViewController.swift
+++ b/Toonie/MyPage/Controllers/MypageViewController.swift
@@ -14,7 +14,7 @@ final class MyPageNavigationController: UINavigationController {
     var rootViewController: UIViewController? {
         return viewControllers.first
     }
-    
+
     override init(rootViewController: UIViewController) {
         super.init(rootViewController: rootViewController)
     }
@@ -26,9 +26,9 @@ final class MyPageNavigationController: UINavigationController {
 }
 
 final class MypageViewController: GestureViewController {
-    
+
     // MARK: - IBOutlet
-    
+
     @IBOutlet private weak var tagSettingButton: UIButton!
     @IBOutlet private weak var recentButton: UIButton!
     @IBOutlet private weak var bookMarkButton: UIButton!
@@ -36,82 +36,90 @@ final class MypageViewController: GestureViewController {
     @IBOutlet private weak var mypageCollectionView: UICollectionView!
     @IBOutlet private weak var dataCheckLabel: UILabel!
     @IBOutlet private weak var dataCheckImageView: UIImageView!
-    
+
     @IBOutlet weak var mypageCollectionViewFlowLayout: UICollectionViewFlowLayout!
-    
+
     // MARK: - private var
-    
+
     private var status = ""
     private var dataList: [ToonList] = []
     private var tagList: [String] = []
-    
+
     // MARK: - Life Cycle
-    
+
     override func viewDidLoad() {
         super.viewDidLoad()
-        
+
         // 초기 화면 - 최근 본 목록
         status = "recent"
         mypageCollectionView.reloadData()
     }
-    
+
     override func viewWillAppear(_ animated: Bool) {
         super.viewWillAppear(animated)
         getToonList(status: status)
         print("뷰윌어피어 함수 안입니덩")
     }
-    
+
     // MARK: - 함수
-    
+
     /// status가 바뀔 때 마다 컬렉션뷰의 제일 첫번째 셀로 돌아가게하는 함수
     private func goToFirstItem() {
-        self.mypageCollectionView.scrollToItem(at: IndexPath(row: 0,
-                                                             section: 0),
-                                               at: .top,
-                                               animated: true)
+        self.mypageCollectionView.scrollToItem(
+            at: IndexPath(
+                row: 0,
+                section: 0),
+            at: .top,
+            animated: true)
     }
-    
+
     /// button의 상태를 초기화해주는 함수
     private func setButtonInit() {
-        recentButton.setImage(UIImage(named: "Recent"),
-                              for: .normal)
-        bookMarkButton.setImage(UIImage(named: "mypageBookmark"),
-                                for: .normal)
-        
+        recentButton.setImage(
+            UIImage(named: "Recent"),
+            for: .normal)
+        bookMarkButton.setImage(
+            UIImage(named: "mypageBookmark"),
+            for: .normal)
+
         recentButton.setTitleColor(#colorLiteral(red: 0.6079999804, green: 0.6079999804, blue: 0.6079999804, alpha: 1), for: .normal)
         bookMarkButton.setTitleColor(#colorLiteral(red: 0.6079999804, green: 0.6079999804, blue: 0.6079999804, alpha: 1), for: .normal)
         tagButton.setTitleColor(#colorLiteral(red: 0.6079999804, green: 0.6079999804, blue: 0.6079999804, alpha: 1), for: .normal)
     }
-    
+
     /// 인스타툰 상세정보 화면으로 이동하는 함수
     private func pushDetailToonViewController(toonID: String) {
-        let storyboard = UIStoryboard(name: "Detail",
-                                      bundle: nil)
+        let storyboard = UIStoryboard(
+            name: "Detail",
+            bundle: nil)
         if let viewController = storyboard
             .instantiateViewController(withIdentifier: "DetailToonView")
             as? DetailToonViewController {
             viewController.detailToonID = toonID
             CommonUtility.sharedInstance
                 .mainNavigationViewController?
-                .pushViewController(viewController,
-                                    animated: true)
+                .pushViewController(
+                    viewController,
+                    animated: true)
         }
     }
-    
+
     /// Tag키워드를 가지고 TagDetail뷰로 이동하는 함수
     private func pushTagDetailViewController(keyword: String) {
-        let storyboard = UIStoryboard(name: "Look",
-                                      bundle: nil)
+        let storyboard = UIStoryboard(
+            name: "Look",
+            bundle: nil)
         guard let viewController = storyboard
             .instantiateViewController(withIdentifier: "LookDetailViewController") as? LookDetailViewController
             else {
                 return
         }
         viewController.selectedKeyword = keyword
-        self.navigationController?.pushViewController(viewController,
-                                                      animated: true)
+        self.navigationController?.pushViewController(
+            viewController,
+            animated: true)
     }
-    
+
     /// dataCheckLabel Hidden 함수
     private func dataCheck(status: String) {
         mypageCollectionView.reloadData()
@@ -128,10 +136,10 @@ final class MypageViewController: GestureViewController {
             dataCheckLabel.isHidden = true
         }
     }
-    
+
     /// Tag리스트를 불러오는 통신 함수
     private func getTagList() {
-        MyKeywordsService.shared.getMyKeywords { [weak self] (res) in
+        MyKeywordsService.shared.getMyKeywords { [weak self] res in
             guard let self = self else { return }
             self.dataList.removeAll()
             self.tagList.removeAll()
@@ -140,11 +148,11 @@ final class MypageViewController: GestureViewController {
             self.dataCheck(status: self.status)
         }
     }
-    
+
     /// 툰 리스트를 status에 따라 통신하는 함수
     private func getToonList(status: String) {
         if status == "recent" {
-            LatestService.shared.getLatestToon { [weak self] (res) in
+            LatestService.shared.getLatestToon { [weak self] res in
                 guard let self = self else { return }
                 if res == nil {
                     self.dataCheck(status: self.status)
@@ -156,9 +164,9 @@ final class MypageViewController: GestureViewController {
                 guard let list = res else { return }
                 self.dataList = list
             }
-            
+
         } else if status == "bookMark" {
-            FavoriteService.shared.getFavoriteToon { [weak self] (res) in
+            FavoriteService.shared.getFavoriteToon { [weak self] res in
                 guard let self = self else { return }
                 if res == nil {
                     self.dataCheck(status: self.status)
@@ -172,38 +180,40 @@ final class MypageViewController: GestureViewController {
             }
         }
     }
-    
+
     // MARK: - IBAction
-    
+
     @IBAction func recentButtonDidTap(_ sender: UIButton) {
         mypageCollectionView.reloadData()
-        if status != "recent"{
+        if status != "recent" {
             tagSettingButton.isHidden = true
             status = "recent"
             getToonList(status: status)
             setButtonInit()
-            recentButton.setImage(UIImage(named: "RecentOn"),
-                                  for: .normal)
+            recentButton.setImage(
+                UIImage(named: "RecentOn"),
+                for: .normal)
             recentButton.setTitleColor(#colorLiteral(red: 0.1333333333, green: 0.1333333333, blue: 0.1333333333, alpha: 1), for: .normal)
         }
     }
-    
+
     @IBAction func bookMarkButtonDidTap(_ sender: UIButton) {
         mypageCollectionView.reloadData()
-        if status != "bookMark"{
+        if status != "bookMark" {
             tagSettingButton.isHidden = true
             status = "bookMark"
             getToonList(status: status)
             setButtonInit()
-            bookMarkButton.setImage(UIImage(named: "mypageBookmarkOn"),
-                                    for: .normal)
+            bookMarkButton.setImage(
+                UIImage(named: "mypageBookmarkOn"),
+                for: .normal)
             bookMarkButton.setTitleColor(#colorLiteral(red: 0.1333333333, green: 0.1333333333, blue: 0.1333333333, alpha: 1), for: .normal)
         }
     }
-    
+
     @IBAction func tagButtonDidTap(_ sender: UIButton) {
         mypageCollectionView.reloadData()
-        if status != "tag"{
+        if status != "tag" {
             tagSettingButton.isHidden = false
             status = "tag"
             getTagList()
@@ -211,46 +221,51 @@ final class MypageViewController: GestureViewController {
             tagButton.setTitleColor(#colorLiteral(red: 0.1333333333, green: 0.1333333333, blue: 0.1333333333, alpha: 1), for: .normal)
         }
     }
-    
+
     @IBAction func tagSettingButtonDidTap(_ sender: UIButton) {
-        
-        let storyboard = UIStoryboard(name: "Main",
-                                      bundle: nil)
+
+        let storyboard = UIStoryboard(
+            name: "Main",
+            bundle: nil)
         guard let viewController = storyboard
             .instantiateViewController(withIdentifier: "KeywordSelectViewController") as? KeywordSelectViewController
             else {
                 return
         }
         viewController.setLayoutMode(bool: true)
-        self.navigationController?.pushViewController(viewController,
-                                                      animated: true)
+        self.navigationController?.pushViewController(
+            viewController,
+            animated: true)
     }
-    
+
 }
 
 // MARK: - UICollectionViewDataSource
 
 extension MypageViewController: UICollectionViewDataSource {
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        numberOfItemsInSection section: Int) -> Int {
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        numberOfItemsInSection section: Int) -> Int {
         if status == "tag" {
             return tagList.count
         } else {
             return dataList.count
         }
     }
-    
-    func collectionView(_ collectionView: UICollectionView,
-                        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
-        
+
+    func collectionView(
+        _ collectionView: UICollectionView,
+        cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
+
         guard let cell = collectionView
-            .dequeueReusableCell(withReuseIdentifier: "MypageCollectionViewCell",
-                                 for: indexPath) as? MypageCollectionViewCell
+            .dequeueReusableCell(
+                withReuseIdentifier: "MypageCollectionViewCell",
+                for: indexPath) as? MypageCollectionViewCell
             else {
                 return UICollectionViewCell()
         }
-        
+
         if status == "tag" {
             let tagName = tagList[indexPath.row]
             cell.setMypageCollectionViewTagCellProperties(tagName: tagName)
@@ -258,21 +273,23 @@ extension MypageViewController: UICollectionViewDataSource {
             let list = dataList[indexPath.row]
             if let label = list.toonName,
                 let url = list.instaThumnailUrl {
-                cell.setMypageCollectionViewToonCellProperties(labelText: label,
-                                                               imageViewURL: url)
+                cell.setMypageCollectionViewToonCellProperties(
+                    labelText: label,
+                    imageViewURL: url)
             }
         }
-        
+
         return cell
     }
-    
+
 }
 
 // MARK: - UICollectionViewDelegate
 
 extension MypageViewController: UICollectionViewDelegate {
-    func collectionView(_ collectionView: UICollectionView,
-                        didSelectItemAt indexPath: IndexPath) {
+    func collectionView(
+        _ collectionView: UICollectionView,
+        didSelectItemAt indexPath: IndexPath) {
         if status == "tag" {
             pushTagDetailViewController(keyword: tagList[indexPath.row])
         } else {
diff --git a/Toonie/MyPage/Views/MypageCollectionViewCell.swift b/Toonie/MyPage/Views/MypageCollectionViewCell.swift
index b121dd6..5a825ce 100644
--- a/Toonie/MyPage/Views/MypageCollectionViewCell.swift
+++ b/Toonie/MyPage/Views/MypageCollectionViewCell.swift
@@ -9,33 +9,33 @@
 import UIKit
 
 final class MypageCollectionViewCell: UICollectionViewCell {
-    
+
     @IBOutlet private weak var mypageToonLabel: UILabel!
     @IBOutlet private weak var mypageToonImageView: UIImageView!
-    
+
     override func prepareForReuse() {
         super.prepareForReuse()
         mypageToonImageView.image = nil
         mypageToonLabel.text = nil
     }
-    
+
     /// Toon 컬렉션뷰셀 데이터 설정
     func setMypageCollectionViewToonCellProperties(labelText: String, imageViewURL: String) {
-        
+
         mypageToonLabel.isHidden = false
         mypageToonLabel.text = labelText
         mypageToonImageView.imageFromUrl(imageViewURL,
-                                         defaultImgPath: "dum2")
-        mypageToonImageView.setCorner(cornerRadius: mypageToonImageView.frame.size.height/2)
+            defaultImgPath: "dum2")
+        mypageToonImageView.setCorner(cornerRadius: mypageToonImageView.frame.size.height / 2)
     }
-    
+
     /// Tag 컬렉션뷰셀 데이터 설정
     func setMypageCollectionViewTagCellProperties(tagName: String) {
-        
+
         mypageToonLabel.isHidden = false
         mypageToonLabel.text = "#" + tagName
         mypageToonImageView.image = UIImage(named: tagImage(name: tagName, storyboardName: "Mypage"))
-        
+
         mypageToonImageView.setCorner(cornerRadius: 5)
     }
 }
diff --git a/Toonie/Network/API+Base.swift b/Toonie/Network/API+Base.swift
index db8785c..a5488f4 100644
--- a/Toonie/Network/API+Base.swift
+++ b/Toonie/Network/API+Base.swift
@@ -44,7 +44,7 @@ class API {
         return baseURL + "/tags"
     }()
     
-    static let forYouToons = {(token) in
+    static let forYouToons = {token in
         return baseURL + "/tags/token/" + token
     }
     
@@ -53,12 +53,12 @@ class API {
     }()
     
     //mykeywords/:token
-    static let myKeywordsToken = { (token) in
+    static let myKeywordsToken = { token in
         return myKeywords + "/" + token
     }
     
     //kewords/:keyword
-    static let keywordInfo = { (keyword) in
+    static let keywordInfo = { keyword in
         return keywords + "/" + keyword
     }
     
@@ -66,19 +66,19 @@ class API {
         return baseURL + "/worklist"
     }()
     
-    static let myFavoriteList = { (token) in
+    static let myFavoriteList = { token in
         return baseURL + "/worklist/" + token + "/default"
     }
     
-    static let myLatestList = { (token) in
+    static let myLatestList = { token in
         return baseURL + "/worklist/" + token + "/latest"
     }
     
-    static let tagFavoriteList = { (token) in
+    static let tagFavoriteList = { token in
         return baseURL + "/tags/worklist/" + token + "/default"
     }
     
-    static let tagLatestList = { (token) in
+    static let tagLatestList = { token in
         return baseURL + "/tags/worklist/" + token + "/latest"
     }
     
diff --git a/Toonie/Network/Requestable.swift b/Toonie/Network/Requestable.swift
index 2f8dc76..452ab52 100644
--- a/Toonie/Network/Requestable.swift
+++ b/Toonie/Network/Requestable.swift
@@ -6,8 +6,8 @@
 //  Copyright © 2019 Yapp. All rights reserved.
 //
 
-import Foundation
 import Alamofire
+import Foundation
 
 protocol Requestable {
     associatedtype NetworkData: Codable
@@ -33,7 +33,7 @@ extension Requestable {
         
         Alamofire.request(encodedUrl,
                           method: .get,
-                          parameters: nil).responseData { (res) in
+                          parameters: nil).responseData { res in
                             switch res.result {
                             case .success:
                                 if let value = res.result.value {
@@ -48,7 +48,7 @@ extension Requestable {
                                     }
                                 }
                             case .failure(let err):
-                                if let error = err as NSError?, error.code == -1009 {
+                                if let error = err as NSError?, error.code == -1_009 {
                                     completion(.networkFail)
                                 } else {
                                     let resCode = res.response?.statusCode ?? 0
@@ -69,7 +69,7 @@ extension Requestable {
         Alamofire.request(encodedUrl,
                           method: .post,
                           parameters: params,
-                          encoding: JSONEncoding.default).responseData { (res) in
+                          encoding: JSONEncoding.default).responseData { res in
                             switch res.result {
                             case .success:
                                 if let value = res.result.value {
@@ -84,7 +84,7 @@ extension Requestable {
                                     }
                                 }
                             case .failure(let err):
-                                if let error = err as NSError?, error.code == -1009 {
+                                if let error = err as NSError?, error.code == -1_009 {
                                     completion(.networkFail)
                                 } else {
                                     let resCode = res.response?.statusCode ?? 0
diff --git a/Toonie/Network/Service/KeywordsService.swift b/Toonie/Network/Service/KeywordsService.swift
index 7506000..6473b8a 100644
--- a/Toonie/Network/Service/KeywordsService.swift
+++ b/Toonie/Network/Service/KeywordsService.swift
@@ -33,6 +33,7 @@ class KeywordsService: Requestable {
 
 class MyKeywordsService: Requestable {
     typealias NetworkData = MyKeywords
+    
     static let shared = MyKeywordsService()
     
     ///전체 키워드 리스트를 조회
@@ -74,7 +75,9 @@ class MyKeywordsService: Requestable {
 
 class KeywordToonListService: Requestable {
     typealias NetworkData = KeywordToonList
-    static let shared = KeywordToonListService() 
+    
+    static let shared = KeywordToonListService()
+    
     //전체 키워드 리스트를 조회
     func getKeywords(keyword: String,
                      completion: @escaping ([String]?) -> Void) {
@@ -94,6 +97,7 @@ class KeywordToonListService: Requestable {
 
 class KeywordToonAllListService: Requestable {
     typealias NetworkData = ToonLists
+    
     static let shared = KeywordToonAllListService()
 
     func getKeywordToonAllList(keyword: String,
diff --git a/Toonie/Network/Service/LookToonOfTagService.swift b/Toonie/Network/Service/LookToonOfTagService.swift
index 2b5df6b..626177f 100644
--- a/Toonie/Network/Service/LookToonOfTagService.swift
+++ b/Toonie/Network/Service/LookToonOfTagService.swift
@@ -15,7 +15,7 @@ struct LookToonOfTagService: Requestable {
     /// 태그로 툰 정보 조회
     func getLookToonOfTag(toonTag: String,
                           completion: @escaping (ToonOfTag) -> Void) {
-        get(API.tags + "/" + toonTag) { (result) in
+        get(API.tags + "/" + toonTag) { result in
             switch result {
             case .networkSuccess(let value):
                 let toonOfTag = value.resResult
diff --git a/Toonie/Network/Service/Service.swift b/Toonie/Network/Service/Service.swift
index c29aeb0..264b482 100644
--- a/Toonie/Network/Service/Service.swift
+++ b/Toonie/Network/Service/Service.swift
@@ -7,7 +7,7 @@ struct TokenService: Requestable {
     func getToken(url: String,
                   params: [String: Any]? = nil,
                   completion: @escaping (NetworkResult<Any>) -> Void) {
-        get(url, params: params) { (result) in
+        get(url, params: params) { result in
             
             switch result {
             case .networkSuccess(let successResult):
diff --git a/Toonie/Preview/PreviewViewController.swift b/Toonie/Preview/PreviewViewController.swift
index 238e4f0..0c3763e 100644
--- a/Toonie/Preview/PreviewViewController.swift
+++ b/Toonie/Preview/PreviewViewController.swift
@@ -37,7 +37,7 @@ final class PreviewViewController: UIViewController {
     private func previewActions() -> [UIPreviewActionItem] {
         let actionTitle = isFavorite ?? false ? "찜하기 취소" : "찜하기"
         let previewFirstAction = UIPreviewAction
-            .init(title: actionTitle, style: .default) { [weak self] (_, _) in
+            .init(title: actionTitle, style: .default) { [weak self] _, _ in
                 let body = [
                     "workListName": "default",
                     "workListInfo": "찜한 목록",
diff --git a/Toonie/Splash/KeywordCell.swift b/Toonie/Splash/KeywordCell.swift
index 34f48fc..7bc5de5 100644
--- a/Toonie/Splash/KeywordCell.swift
+++ b/Toonie/Splash/KeywordCell.swift
@@ -11,7 +11,7 @@ import UIKit
 final class KeywordCell: UICollectionViewCell {
     @IBOutlet weak var backView: UIView!
     @IBOutlet weak var titleLabel: UILabel!
-    
+
     var cellStatus: Bool = false {
         didSet {
             setBorderViewLayout(status: cellStatus)
@@ -21,21 +21,25 @@ final class KeywordCell: UICollectionViewCell {
     ///didTap 일어날때마다 cellBackgroundView 레이아웃 바꿔주는 함수
     func setBorderViewLayout(status: Bool) {
         if status == false { //선택안함
-            backView.setBorder(color: UIColor.init(white: 0, alpha: 0.4).cgColor,
-                               borderWidth: 1)
-            titleLabel.textColor = UIColor.init(white: 0, alpha: 0.4)
+            backView.setBorder(
+                color: UIColor(white: 0, alpha: 0.4).cgColor,
+                borderWidth: 1)
+            titleLabel.textColor = UIColor(white: 0, alpha: 0.4)
             backView.backgroundColor = UIColor.white
-            titleLabel.font = UIFont.getAppleSDGothicNeo(option: .regular,
-                                                                   size: titleLabel.font.pointSize)
-        } else {//선택함
-            backView.setBorder(color: UIColor.init(white: 0, alpha: 0).cgColor,
-                                                   borderWidth: 1)
-            backView.backgroundColor = UIColor.init(named: "main")
-            titleLabel.textColor = UIColor.init(white: 1, alpha: 1)
-            titleLabel.font = UIFont.getAppleSDGothicNeo(option: .bold,
-                                                         size: titleLabel.font.pointSize)
+            titleLabel.font = UIFont.getAppleSDGothicNeo(
+                option: .regular,
+                size: titleLabel.font.pointSize)
+        } else { //선택함
+            backView.setBorder(
+                color: UIColor(white: 0, alpha: 0).cgColor,
+                borderWidth: 1)
+            backView.backgroundColor = UIColor(named: "main")
+            titleLabel.textColor = UIColor(white: 1, alpha: 1)
+            titleLabel.font = UIFont.getAppleSDGothicNeo(
+                option: .bold,
+                size: titleLabel.font.pointSize)
         }
         backView.setCorner(cornerRadius: 23.5)
     }
-    
+
 }
diff --git a/Toonie/Splash/KeywordSelectViewController.swift b/Toonie/Splash/KeywordSelectViewController.swift
index c5772ac..3b6b2d2 100644
--- a/Toonie/Splash/KeywordSelectViewController.swift
+++ b/Toonie/Splash/KeywordSelectViewController.swift
@@ -6,8 +6,8 @@
 //  Copyright © 2019 Yapp. All rights reserved.
 //
 
-import UIKit
 import KTCenterFlowLayout
+import UIKit
 
 final class KeywordSelectViewController: GestureViewController {
     @IBOutlet weak var bigTitleLabel: UILabel!
@@ -54,21 +54,21 @@ final class KeywordSelectViewController: GestureViewController {
     func setKeywordFlowLayout() {
         keywordFlowLayout.minimumInteritemSpacing = 10
         keywordFlowLayout.minimumLineSpacing = 20 * CommonUtility.getDeviceRatioHieght()     //라인 사이의 최소간격
-        keywordFlowLayout.sectionInset = UIEdgeInsets.init(top: 0, left: 5, bottom: 0, right: 5)
-        keywordFlowLayout.estimatedItemSize = CGSize.init(width: 95, height: 50)
+        keywordFlowLayout.sectionInset = UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5)
+        keywordFlowLayout.estimatedItemSize = CGSize(width: 95, height: 50)
     }
     
     ///키워드 선택할때마다 카운트레이블, 버튼 리로드
     func reloadKeywordView() {
         keywordCountLabel.text = "\(keywordSelectArray.count)개"
         
-        if 3 <= keywordSelectArray.count {
+        if keywordSelectArray.count >= 3 {
             //버튼상태 바꿈
             mainMoveButton.isEnabled = true
             mainMoveButton.backgroundColor = UIColor.clear // 그라디언트 소스코드로 적용해야함.
         } else {
             mainMoveButton.isEnabled = false
-            mainMoveButton.backgroundColor = UIColor.init(named: "disabledButton")
+            mainMoveButton.backgroundColor = UIColor(named: "disabledButton")
             // color disableButton 오류
         }
     }
@@ -79,7 +79,7 @@ final class KeywordSelectViewController: GestureViewController {
     
     ///keywords 값들 가져옴
     func setKeywordValue() {
-        KeywordsService.shared.getKeywords { [weak self] (result) in
+        KeywordsService.shared.getKeywords { [weak self] result in
             guard let self = self else { return }
             self.keywords = result ?? [String]()
             self.reloadKeywordCollectionView()
@@ -88,7 +88,7 @@ final class KeywordSelectViewController: GestureViewController {
     
     ///사용자가 선택한 keywords를 가져옴
     func setSelectedKeywordValue() {
-        MyKeywordsService.shared.getMyKeywords { [weak self] (myKeywords) in
+        MyKeywordsService.shared.getMyKeywords { [weak self] myKeywords in
             guard let self = self else { return }
             self.keywordSelectArray = myKeywords ?? [String]()
             self.reloadKeywordCollectionView()
diff --git a/Toonie/Splash/SplashViewController.swift b/Toonie/Splash/SplashViewController.swift
index 469f345..d2a33be 100644
--- a/Toonie/Splash/SplashViewController.swift
+++ b/Toonie/Splash/SplashViewController.swift
@@ -6,25 +6,25 @@
 //  Copyright © 2019 Yapp. All rights reserved.
 //
 
-import UIKit
 import Lottie
+import UIKit
 
 final class SplashViewController: GestureViewController {
-    
+
     @IBOutlet weak var logoFrameView: UIView!
     private var logoAnimationView: AnimationView?
-    
+
     var moveMode: Bool = false
-    
+
     override func viewDidLoad() {
         super.viewDidLoad()
-        
+
         setLogoAnimationView()
-        
+
         //사용자 상태 체크 후 애니메이션 실행.
-        self.getUserSelectedKeyword { [weak self] (mode) in
+        self.getUserSelectedKeyword { [weak self] mode in
             guard let self = self else { return }
-            self.logoAnimationView?.play { [weak self](finished) in
+            self.logoAnimationView?.play { [weak self]finished in
                 guard let self = self else { return }
                 if finished {
                     if mode == true {
@@ -36,51 +36,52 @@ final class SplashViewController: GestureViewController {
             }
         }
     }
-    
+
     ///애니메이션 후 메인화면으로 이동
     func moveMainView() {
         let storyboard = UIStoryboard(name: "Main", bundle: nil)
         let viewController = storyboard.instantiateViewController(withIdentifier: "RootViewController")
         UIApplication.shared.keyWindow?.rootViewController = viewController
     }
-    
+
     ///키워드 화면 진입
     func moveKeywordView() {
         let storyboard = UIStoryboard(name: "Main", bundle: nil)
         let viewController = storyboard.instantiateViewController(withIdentifier: "KeywordSelectViewController")
         UIApplication.shared.keyWindow?.rootViewController = viewController
     }
-    
+
     ///logoAnimationView 세팅
     func setLogoAnimationView() {
         logoAnimationView = AnimationView(name: "logoAnimation")
         if let logoAnimationView = logoAnimationView {
             logoAnimationView.contentMode = .scaleAspectFit
-            logoAnimationView.frame = CGRect.init(x: 0,
-                                                  y: 0,
-                                                  width: logoFrameView.bounds.width,
-                                                  height: logoFrameView.bounds.height)
+            logoAnimationView.frame = CGRect(
+                x: 0,
+                y: 0,
+                width: logoFrameView.bounds.width,
+                height: logoFrameView.bounds.height)
             logoFrameView.addSubview(logoAnimationView)
         }
     }
-    
+
     ///user가 선택한 keyword가 있냐 없냐에 따라 이동하는 화면 mode를 다르게할 메서드
     func getUserSelectedKeyword(mode: @escaping (Bool) -> Void) {
-        
+
         //userToken이 없거나 키워드 선택을 하지 않은 유저인 경우 - true
         //나머지의 경우 - false
-        if CommonUtility.getUserToken() == ""{
+        if CommonUtility.getUserToken() == "" {
             mode(true)
         } else {
-            MyKeywordsService.shared.getMyKeywords { (myKeywords) in
-                if myKeywords?.count == 0 || myKeywords == nil {
+            MyKeywordsService.shared.getMyKeywords { myKeywords in
+                if myKeywords?.isEmpty == true || myKeywords == nil {
                     mode(true)
                 } else {
                     mode(false)
                 }
             }
-            
+
         }
     }
-    
+
 }
diff --git a/Toonie/Supporting Files/AppDelegate.swift b/Toonie/Supporting Files/AppDelegate.swift
index 42b4bb9..1632b6a 100644
--- a/Toonie/Supporting Files/AppDelegate.swift	
+++ b/Toonie/Supporting Files/AppDelegate.swift	
@@ -6,72 +6,70 @@
 //  Copyright © 2019 Toonie. All rights reserved.
 //
 
-import UIKit
-import Firebase
-import Fabric
 import Crashlytics
+import Fabric
+import Firebase
+import UIKit
 
 @UIApplicationMain
 class AppDelegate: UIResponder, UIApplicationDelegate {
-    
+
     var window: UIWindow?
-    
-    func application(_ application: UIApplication,
-                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
-        
+
+    func application(
+        _ application: UIApplication,
+        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
+
         FirebaseApp.configure()
-        
+
         Messaging.messaging().delegate = self
         UNUserNotificationCenter.current().delegate = self
         let authOptions: UNAuthorizationOptions = [.alert, .badge, .sound]
         UNUserNotificationCenter.current().requestAuthorization(
             options: authOptions,
-            completionHandler: {_, _ in })
-        
+            completionHandler: { _, _ in })
+
         application.registerForRemoteNotifications()
-        
-        UserDefaults.standard.set(UserDefaults.standard.integer(forKey: "appStartCount") + 1,
-                                  forKey: "appStartCount")
+
+        UserDefaults.standard.set(UserDefaults.standard.integer(
+            forKey: "appStartCount") + 1,
+            forKey: "appStartCount")
 
         print("현재 횟수 \(UserDefaults.standard.integer(forKey: "appStartCount"))")
         Fabric.with([Crashlytics.self])
 
         return true
     }
-    
+
     func applicationWillResignActive(_ application: UIApplication) {
     }
-    
+
     func applicationDidEnterBackground(_ application: UIApplication) {
     }
-    
+
     func applicationWillEnterForeground(_ application: UIApplication) {
     }
-    
+
     func applicationDidBecomeActive(_ application: UIApplication) {
     }
-    
+
     func applicationWillTerminate(_ application: UIApplication) {
     }
-    
-    
 }
 
-
-extension AppDelegate : MessagingDelegate {
+extension AppDelegate: MessagingDelegate {
     func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String) {
         print("Firebase registration token: \(fcmToken)")
-        
-        let dataDict:[String: String] = ["token": fcmToken]
+
+        let dataDict: [String: String] = ["token": fcmToken]
         NotificationCenter.default.post(name: Notification.Name("FCMToken"), object: nil, userInfo: dataDict)
     }
-    
+
     func messaging(_ messaging: Messaging, didReceive remoteMessage: MessagingRemoteMessage) {
         print("Received data message: \(remoteMessage.appData)")
     }
 }
 
-
 extension AppDelegate: UNUserNotificationCenterDelegate {
-    
+
 }
